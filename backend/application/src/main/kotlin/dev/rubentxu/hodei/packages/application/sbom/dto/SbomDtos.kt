package dev.rubentxu.hodei.packages.application.sbom.dto

import dev.rubentxu.hodei.packages.domain.integrityverification.sbom.model.SbomDocument
import dev.rubentxu.hodei.packages.domain.integrityverification.sbom.model.SbomFormat
import java.time.Instant

/**
 * Data Transfer Object for SBOM document response.
 * Contains the essential information about an SBOM document.
 */
data class SbomDocumentResponse(
    val id: String,
    val artifactId: String,
    val format: String,
    val formatVersion: String,
    val specVersion: String,
    val createdAt: Instant,
    val content: String,
    val metadata: Map<String, String>
) {
    companion object {
        /**
         * Converts a domain SBOM document to its DTO representation.
         *
         * @param document The domain SBOM document
         * @return SbomDocumentResponse DTO
         */
        fun fromDomainDocument(document: SbomDocument): SbomDocumentResponse {
            return SbomDocumentResponse(
                id = document.id.toString(),
                artifactId = document.artifactId,
                format = document.format.name,
                formatVersion = document.formatVersion,
                specVersion = document.specVersion,
                createdAt = document.createdAt,
                content = document.content,
                metadata = document.metadata
            )
        }
    }
}

/**
 * Request DTO for creating a new SBOM document.
 */
data class CreateSbomRequest(
    val artifactId: String,
    val format: String,
    val formatVersion: String,
    val specVersion: String,
    val content: String,
    val metadata: Map<String, String> = emptyMap()
) {
    /**
     * Converts this request DTO to a domain SBOM document.
     *
     * @return Domain SbomDocument object
     * @throws IllegalArgumentException if format is invalid
     */
    fun toSbomDocument(): SbomDocument {
        val sbomFormat = SbomFormat.fromString(format)
            ?: throw IllegalArgumentException("Invalid SBOM format: $format")

        return SbomDocument(
            id = null, // Will be generated by repository
            artifactId = artifactId,
            format = sbomFormat,
            formatVersion = formatVersion,
            specVersion = specVersion,
            content = content,
            createdAt = Instant.now(),
            metadata = metadata
        )
    }
}

/**
 * Request DTO for SBOM analysis.
 */
data class SbomAnalysisRequest(
    val sbomId: String,
    val analysisTypes: List<String>
)

/**
 * Response DTO for SBOM analysis results.
 */
data class SbomAnalysisResponse(
    val sbomId: String,
    val analysisTimestamp: Instant,
    val vulnerabilities: List<VulnerabilityDto>,
    val licenseCompliance: LicenseComplianceDto? = null,
    val analysisSummary: Map<String, Any>? = null
)

/**
 * DTO for vulnerability information.
 */
data class VulnerabilityDto(
    val id: String,
    val severity: String,
    val description: String,
    val componentName: String,
    val componentVersion: String?
)

/**
 * DTO for license compliance information.
 */
data class LicenseComplianceDto(
    val status: String,
    val issues: List<String>
)